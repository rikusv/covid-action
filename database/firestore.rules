rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdminUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.admin == true;
    }


    match /{document=**} {
      allow read, write: if false;
    }
    match /locations/{location} {
      allow read: if true;
      allow write: if isAdminUser() &&
        request.resource.data.category is string && request.resource.data.category.size() > 0 &&
      	request.resource.data.coordinates is latlng &&
        request.resource.data.description is string &&
        request.resource.data.name is string && request.resource.data.name.size() > 0 &&
        request.resource.data.tags is list;
    }
    match /pending-locations/{location} {
      allow read: if isAdminUser();
      allow create: if request.auth.uid != null &&
        request.resource.data.category is string && request.resource.data.category.size() > 0 &&
      	request.resource.data.coordinates is latlng &&
        request.resource.data.description is string &&
        request.resource.data.name is string && request.resource.data.name.size() > 0 &&
        request.resource.data.tags is list;
      allow update: if isAdminUser();
      allow delete: if isAdminUser();
    }
    match /master-data/{group}/{type}/{value} {
      allow list: if isAdminUser() || (request.auth.uid != null && resource.data.active == true);
      allow create: if isAdminUser();
      allow update: if isAdminUser();
    }
    match /users/{user} {
      allow get: if request.auth.uid == user;
      allow read: if isAdminUser();
      allow update: if isAdminUser();
    }
  }
}
